/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\r\n\r\n$(function () {\r\n\r\n    // preloader\r\n    // if ($('.preloader').length > 0) {\r\n    //     let counting = setInterval(function () {\r\n    //         let loader = $('#percentage');\r\n    //         let currval = parseInt(loader.text());\r\n\r\n    //         if (currval < 90) {\r\n    //             loader.text(++currval);\r\n    //         } else if (currval < 95 && document.readyState === \"interactive\") {\r\n    //             loader.text(95);\r\n    //         } else if (currval < 99 && document.readyState === \"complete\") {\r\n    //             loader.text(99);\r\n    //         }\r\n\r\n    //         if (currval >= 99 && document.readyState === \"complete\") {\r\n    //             clearInterval(counting);\r\n    //             loader.text(100);\r\n    //             setTimeout(function () {\r\n    //                 $('body').removeClass('preloading').addClass('is-loaded');\r\n    //             }, 300);\r\n    //         }\r\n    //     }, 20);\r\n    // }\r\n\r\n    if (typeof Fancybox !== \"undefined\" && Fancybox !== null) {\r\n        Fancybox.bind(\"[data-fancybox]\", {\r\n            dragToClose: false,\r\n            closeClick: \"outside\",\r\n        });\r\n    }\r\n\r\n    /* =========== Event Handlers ============== */\r\n\r\n    $(document).on(\"click\", function (e) {\r\n        const $target = $(e.target);\r\n\r\n        // faq \r\n        if ($target.closest('.faq__item').length) {\r\n            const $faqItem = $target.closest('.faq__item')\r\n            $faqItem.toggleClass('active');\r\n            $faqItem.find('.faq__item-answer').slideToggle()\r\n        }\r\n\r\n        // add to cart btn\r\n        if ($target.is('.product__add-to-cart')) {\r\n            $target.toggleClass('in-cart');\r\n\r\n            if ($target.hasClass('in-cart')) {\r\n                $target.find('span').text('В корзине')\r\n            } else {\r\n                $target.find('span').text('В корзину')\r\n            }\r\n        }\r\n\r\n        // toggler visibility paswor\r\n        if ($target.is('.form__password-visibility-btn')) {\r\n            const $btn = $target;\r\n            const $input = $btn.siblings('input[type=\"password\"], input[type=\"text\"]');\r\n\r\n            if ($input.attr('type') === 'password') {\r\n                $input.attr('type', 'text');\r\n                $btn.removeClass('icon-eye-off').addClass('icon-eye');\r\n            } else {\r\n                $input.attr('type', 'password');\r\n                $btn.removeClass('icon-eye').addClass('icon-eye-off');\r\n            }\r\n        }\r\n\r\n        // toggler catalog\r\n        if ($target.closest(\".header__services-btn\").length) {\r\n            $(\".header__services-btn\").toggleClass('active');\r\n            $('.header__services-content').toggleClass('visible');\r\n            $('body').toggleClass('lock-services');\r\n        } else if (!$target.closest(\".header__services-content\").length || $target.is('.header__services-close')) {\r\n            $(\".header__services-btn\").removeClass('active');\r\n            $('.header__services-content').removeClass('visible');\r\n            $('body').removeClass('lock-services');\r\n        }\r\n\r\n        // menu toggler\r\n        if ($target.closest('.header__menu-toggler').length) {\r\n            $('.header__menu-toggler').toggleClass('active');\r\n            $('.menu').toggleClass(\"menu-open\");\r\n            $('body').toggleClass('lock-menu');\r\n        } else if (!$target.closest('.menu__body').length) {\r\n            $('.header__menu-toggler').removeClass('active');\r\n            $('.menu').removeClass(\"menu-open\");\r\n            $('body').removeClass('lock-menu');\r\n        }\r\n\r\n        // product info tabs\r\n        if ($target.closest('.product-card__tab').length) {\r\n            const $tab = $target.closest('.product-card__tab');\r\n            const $tabsWrapper = $tab.closest('.swiper-wrapper');\r\n            const tabIndex = $tabsWrapper.find('.product-card__tab').index($tab);\r\n            const $infoBlock = $tab.closest('.product-card__info').find('.product-card__info-content').children().eq(tabIndex);\r\n\r\n            $tabsWrapper.find('.product-card__tab').removeClass('active');\r\n            $tab.addClass('active');\r\n\r\n            $tab.closest('.product-card__info').find('.product-card__info-block').removeClass('active');\r\n            $infoBlock.addClass('active');\r\n        }\r\n\r\n\r\n        // calc tabs\r\n        if ($target.is('.calc__tab')) {\r\n            const $tab = $target;\r\n            const $tabsContainer = $tab.closest('.calc__tabs');\r\n            const tabIndex = $tabsContainer.find('.calc__tab').index($tab);\r\n            const $contentBlocks = $tab.closest('.calc__container').find('.calc__content').find('.calc__block');\r\n            const $targetBlock = $contentBlocks.eq(tabIndex);\r\n            const serviceName = $tab.text().trim();\r\n\r\n            $tabsContainer.find('.calc__tab').removeClass('active');\r\n            $tab.addClass('active');\r\n\r\n            $contentBlocks.removeClass('active');\r\n            $targetBlock.addClass('active');\r\n\r\n            $tab.closest('.calc__container').find('.calc__result-service').text(serviceName.toLowerCase());\r\n        }\r\n\r\n        // person accordion\r\n        if ($target.is('.person__accordion-title')) {\r\n            const $accordion = $target.closest('.person__accordion')\r\n            $accordion.toggleClass('active');\r\n            $accordion.find('.person__accordion-content').slideToggle()\r\n        }\r\n\r\n    });\r\n\r\n\r\n    // Display block in person accordion if title is active\r\n    $('.person__accordion.active').each(function () {\r\n        const $content = $(this).find('.person__accordion-content');\r\n        $content.slideDown(0);\r\n    });\r\n\r\n\r\n    // form submit validation\r\n\r\n    function initFormValidation($form) {\r\n        $form.on('submit', function (e) {\r\n            let isValid = true;\r\n            $form.find('[data-required]').each(function () {\r\n                const $input = $(this);\r\n                const inputType = $input.attr('type');\r\n                const inputName = $input.attr('name');\r\n\r\n                $input.removeClass('_error');\r\n                if ($input.closest('.select').length) {\r\n                    $input.closest('.select').removeClass('_error');\r\n                } else {\r\n                    $input.parent().removeClass('_error');\r\n                }\r\n\r\n                // Получаем значение, заменяя null или undefined пустой строкой\r\n                const inputValue = $input.val() || '';\r\n\r\n                if ($input.is('select') && inputValue === '') {\r\n                    $input.addClass('_error');\r\n                    if ($input.closest('.select').length) {\r\n                        $input.closest('.select').addClass('_error');\r\n                    }\r\n                    isValid = false;\r\n                } else if (inputType === 'checkbox' && !$input.is(':checked')) {\r\n                    $input.addClass('_error');\r\n                    isValid = false;\r\n                } else if (inputName === 'phone' && !phoneTest(inputValue)) {\r\n                    $input.addClass('_error');\r\n                    isValid = false;\r\n                } else if (inputName === 'email' && !emailTest(inputValue)) {\r\n                    $input.addClass('_error');\r\n                    isValid = false;\r\n                    // Используем inputValue.trim() вместо $input.val().trim()\r\n                } else if (inputValue.trim() === '') {\r\n                    $input.addClass('_error');\r\n                    isValid = false;\r\n                }\r\n            });\r\n\r\n            if (!isValid) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n\r\n        $form.find('[data-required]').on('input change', function () {\r\n            const $input = $(this);\r\n            const inputType = $input.attr('type');\r\n            const inputName = $input.attr('name');\r\n\r\n            // Также обновляем здесь\r\n            const inputValue = $input.val() || '';\r\n\r\n            if ($input.is('select')) {\r\n                if (inputValue !== '') {\r\n                    $input.removeClass('_error');\r\n                    $input.closest('.select').removeClass('_error');\r\n                }\r\n            } else if (inputType === 'checkbox') {\r\n                if ($input.is(':checked')) {\r\n                    $input.removeClass('_error');\r\n                }\r\n            } else if (inputName === 'phone') {\r\n                if (phoneTest(inputValue)) {\r\n                    $input.removeClass('_error');\r\n                }\r\n            } else if (inputName === 'email') {\r\n                if (emailTest(inputValue)) {\r\n                    $input.removeClass('_error');\r\n                }\r\n            } else {\r\n                // Используем inputValue.trim()\r\n                if (inputValue.trim() !== '') {\r\n                    $input.removeClass('_error');\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // Запуск для всех форм\r\n    $('form').each(function () {\r\n        initFormValidation($(this));\r\n    });\r\n\r\n    function emailTest(email) {\r\n        const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(email).toLowerCase());\r\n    }\r\n\r\n    function phoneTest(phone) {\r\n        const cleaned = phone.replace(/\\D/g, '');\r\n        return cleaned.length >= 10 && /^[1-9]\\d{9,14}$/.test(cleaned);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // \"grid\" или \"rows\" в Каталоге\r\n\r\n    $('.shop__grid-input').on('change', function () {\r\n        const gridType = $(this).val();\r\n        const $shopItems = $('.shop__items');\r\n\r\n        if (gridType === 'rows') {\r\n            $shopItems.addClass('shop__items--row');\r\n        } else {\r\n            $shopItems.removeClass('shop__items--row');\r\n        }\r\n    });\r\n\r\n\r\n    // quantity block\r\n    $('.quantity-block').each(function () {\r\n        const $block = $(this);\r\n        const $input = $block.find('.quantity-block__input');\r\n        const $btnUp = $block.find('.quantity-block__up');\r\n        const $btnDown = $block.find('.quantity-block__down');\r\n\r\n        $btnUp.on('click', function () {\r\n            let currentVal = parseInt($input.val()) || 0;\r\n            if (currentVal < 999) {\r\n                $input.val(currentVal + 1);\r\n            }\r\n        });\r\n\r\n        $btnDown.on('click', function () {\r\n            let currentVal = parseInt($input.val()) || 0;\r\n            if (currentVal > 1) {\r\n                $input.val(currentVal - 1);\r\n            }\r\n        });\r\n\r\n        $input.on('input', function () {\r\n            let val = $input.val().replace(/\\D/g, '');\r\n            val = parseInt(val) || 1;\r\n            if (val < 1) val = 1;\r\n            if (val > 999) val = 999;\r\n            $input.val(val);\r\n        });\r\n\r\n\r\n        $input.on('paste', function (e) {\r\n            const pastedData = e.originalEvent.clipboardData.getData('text');\r\n            if (/\\D/.test(pastedData)) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    });\r\n\r\n    /* =========== Event Handlers ============== */\r\n\r\n\r\n\r\n\r\n    // sliders\r\n\r\n\r\n    if ($('.promo__banner').length) {\r\n        new Swiper('.promo__banner', {\r\n            slidesPerView: 1,\r\n            effect: \"fade\",\r\n            fadeEffect: {\r\n                crossFade: true\r\n            },\r\n            navigation: {\r\n                prevEl: '.promo__prev',\r\n                nextEl: '.promo__next'\r\n            },\r\n            pagination: {\r\n                el: \".promo__pagination\",\r\n                clickable: true\r\n            }\r\n        });\r\n    }\r\n\r\n    if ($('.products__slider').length) {\r\n        new Swiper('.products__slider', {\r\n            slidesPerView: \"auto\",\r\n            spaceBetween: 10,\r\n            navigation: {\r\n                prevEl: '.products__prev',\r\n                nextEl: '.products__next'\r\n            },\r\n            breakpoints: {\r\n                767.98: {\r\n                    spaceBetween: 20,\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    if ($('.blog__slider').length) {\r\n        new Swiper('.blog__slider', {\r\n            slidesPerView: \"auto\",\r\n            spaceBetween: 10,\r\n            navigation: {\r\n                prevEl: '.blog__prev',\r\n                nextEl: '.blog__next'\r\n            },\r\n            breakpoints: {\r\n                575.98: {\r\n                    slidesPerView: 2,\r\n                    spaceBetween: 20,\r\n                },\r\n                991.98: {\r\n                    slidesPerView: 3,\r\n                    spaceBetween: 20,\r\n                },\r\n                1199.98: {\r\n                    slidesPerView: 4,\r\n                    spaceBetween: 20,\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    if ($('.nav-slider').length) {\r\n\r\n        $('.nav-slider').each(function () {\r\n            const $currentSlider = $(this);\r\n            const $activeItem = $currentSlider.find('.nav-slider__item .label.active');\r\n\r\n            let initialIndex = 0;\r\n\r\n            if ($activeItem.length) {\r\n                initialIndex = $activeItem.parent().index();\r\n            }\r\n\r\n            new Swiper($currentSlider[0], {\r\n                slidesPerView: \"auto\",\r\n                spaceBetween: 5,\r\n                initialSlide: initialIndex,\r\n                breakpoints: {\r\n                    991.98: {\r\n                        spaceBetween: 10,\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    if ($('.clients__slider').length) {\r\n        new Swiper('.clients__slider', {\r\n            slidesPerView: 1,\r\n            spaceBetween: 10,\r\n            pagination: {\r\n                el: '.clients__pagination',\r\n                clickable: true\r\n            }\r\n        });\r\n    }\r\n\r\n    if ($('.services__slider').length) {\r\n        new Swiper('.services__slider', {\r\n            slidesPerView: \"auto\",\r\n            spaceBetween: 10,\r\n            navigation: {\r\n                prevEl: '.services__prev',\r\n                nextEl: '.services__next'\r\n            },\r\n            breakpoints: {\r\n                767.98: {\r\n                    slidesPerView: 2,\r\n                    spaceBetween: 20,\r\n                },\r\n                1399.98: {\r\n                    slidesPerView: 3,\r\n                    spaceBetween: 20,\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    // Phone Russia Mask\r\n\r\n    var phoneInputs = document.querySelectorAll('input[type=\"tel\"]');\r\n    var getInputNumbersValue = function (input) {\r\n        return input.value.replace(/\\D/g, '');\r\n    };\r\n    var onPhonePaste = function (e) {\r\n        var input = e.target,\r\n            inputNumbersValue = getInputNumbersValue(input);\r\n        var pasted = e.clipboardData || window.clipboardData;\r\n        if (pasted) {\r\n            var pastedText = pasted.getData('Text');\r\n            if (/\\D/g.test(pastedText)) {\r\n                input.value = inputNumbersValue;\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    var onPhoneInput = function (e) {\r\n        var input = e.target,\r\n            inputNumbersValue = getInputNumbersValue(input),\r\n            selectionStart = input.selectionStart,\r\n            formattedInputValue = \"\";\r\n        if (!inputNumbersValue) {\r\n            return input.value = \"\";\r\n        }\r\n        if (input.value.length != selectionStart) {\r\n            if (e.data && /\\D/g.test(e.data)) {\r\n                input.value = inputNumbersValue;\r\n            }\r\n            return;\r\n        }\r\n        if (inputNumbersValue.length > 11) {\r\n            inputNumbersValue = inputNumbersValue.substring(0, 11);\r\n        }\r\n        formattedInputValue = \"+7 (\";\r\n        if (inputNumbersValue.length >= 2) {\r\n            formattedInputValue += inputNumbersValue.substring(1, 4);\r\n        }\r\n        if (inputNumbersValue.length >= 5) {\r\n            formattedInputValue += \") \" + inputNumbersValue.substring(4, 7);\r\n        }\r\n        if (inputNumbersValue.length >= 8) {\r\n            formattedInputValue += \"-\" + inputNumbersValue.substring(7, 9);\r\n        }\r\n        if (inputNumbersValue.length >= 10) {\r\n            formattedInputValue += \"-\" + inputNumbersValue.substring(9, 11);\r\n        }\r\n        input.value = formattedInputValue;\r\n    };\r\n    var onPhoneKeyDown = function (e) {\r\n        var inputValue = e.target.value.replace(/\\D/g, '');\r\n        if (e.keyCode == 8 && inputValue.length == 1) {\r\n            e.target.value = \"\";\r\n        }\r\n    };\r\n    for (var phoneInput of phoneInputs) {\r\n        phoneInput.addEventListener('focus', function () {\r\n            if (!this.value) {\r\n                this.value = \"+7 \";\r\n            }\r\n        });\r\n        phoneInput.addEventListener('keydown', onPhoneKeyDown);\r\n        phoneInput.addEventListener('input', onPhoneInput, false);\r\n        phoneInput.addEventListener('paste', onPhonePaste, false);\r\n    }\r\n\r\n\r\n    // Function for handling dynamic adaptation\r\n    // class DynamicAdapt {\r\n    //     constructor(type) {\r\n    //         this.type = type;\r\n    //         this.оbjects = [];\r\n    //         this.daClassname = \"_dynamic_adapt_\";\r\n    //         this.nodes = $('[data-da]');\r\n    //     }\r\n\r\n    //     init() {\r\n    //         // Populate the objects array\r\n    //         this.nodes.each((i, node) => {\r\n    //             const $node = $(node);\r\n    //             const data = $node.data('da').trim();\r\n    //             const dataArray = data.split(\",\");\r\n    //             const оbject = {};\r\n    //             оbject.element = $node;\r\n    //             оbject.parent = $node.parent();\r\n    //             оbject.destination = $(dataArray[0].trim());\r\n    //             оbject.breakpoint = dataArray[1] ? dataArray[1].trim() : \"767\";\r\n    //             оbject.place = dataArray[2] ? dataArray[2].trim() : \"last\";\r\n    //             оbject.index = this.indexInParent(оbject.parent, оbject.element);\r\n    //             this.оbjects.push(оbject);\r\n    //         });\r\n\r\n    //         this.arraySort(this.оbjects);\r\n\r\n    //         // Array of unique media queries\r\n    //         this.mediaQueries = this.оbjects.map(item => {\r\n    //             return `(${this.type}-width: ${item.breakpoint}px),${item.breakpoint}`;\r\n    //         }).filter((item, index, self) => {\r\n    //             return self.indexOf(item) === index;\r\n    //         });\r\n\r\n    //         // Attach listener to media query and call handler on first load\r\n    //         this.mediaQueries.forEach(media => {\r\n    //             const mediaSplit = media.split(',');\r\n    //             const matchMedia = window.matchMedia(mediaSplit[0]);\r\n    //             const mediaBreakpoint = mediaSplit[1];\r\n\r\n    //             // Array of objects with matching breakpoint\r\n    //             const objectsFilter = this.оbjects.filter(item => {\r\n    //                 return item.breakpoint === mediaBreakpoint;\r\n    //             });\r\n\r\n    //             matchMedia.addListener(() => {\r\n    //                 this.mediaHandler(matchMedia, objectsFilter);\r\n    //             });\r\n    //             this.mediaHandler(matchMedia, objectsFilter);\r\n    //         });\r\n    //     }\r\n\r\n    //     mediaHandler(matchMedia, оbjects) {\r\n    //         if (matchMedia.matches) {\r\n    //             оbjects.forEach(оbject => {\r\n    //                 оbject.index = this.indexInParent(оbject.parent, оbject.element);\r\n    //                 this.moveTo(оbject.place, оbject.element, оbject.destination);\r\n    //             });\r\n    //         } else {\r\n    //             оbjects.forEach(оbject => {\r\n    //                 if (оbject.element.hasClass(this.daClassname)) {\r\n    //                     this.moveBack(оbject.parent, оbject.element, оbject.index);\r\n    //                 }\r\n    //             });\r\n    //         }\r\n    //     }\r\n\r\n    //     // Move function\r\n    //     moveTo(place, element, destination) {\r\n    //         element.addClass(this.daClassname);\r\n    //         if (place === 'last' || place >= destination.children().length) {\r\n    //             destination.append(element);\r\n    //         } else if (place === 'first') {\r\n    //             destination.prepend(element);\r\n    //         } else {\r\n    //             destination.children().eq(place).before(element);\r\n    //         }\r\n    //     }\r\n\r\n    //     // Return function\r\n    //     moveBack(parent, element, index) {\r\n    //         element.removeClass(this.daClassname);\r\n    //         if (parent.children().eq(index).length) {\r\n    //             parent.children().eq(index).before(element);\r\n    //         } else {\r\n    //             parent.append(element);\r\n    //         }\r\n    //     }\r\n\r\n    //     // Get index within parent\r\n    //     indexInParent(parent, element) {\r\n    //         const parentChildren = parent.children();\r\n    //         return parentChildren.index(element);\r\n    //     }\r\n\r\n    //     // Sort array by breakpoint and place\r\n    //     arraySort(arr) {\r\n    //         if (this.type === \"min\") {\r\n    //             arr.sort((a, b) => a.breakpoint - b.breakpoint || a.place - b.place);\r\n    //         } else {\r\n    //             arr.sort((a, b) => b.breakpoint - a.breakpoint || b.place - a.place);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // const da = new DynamicAdapt(\"max\");\r\n    // da.init();\r\n\r\n\r\n    // Contacts Block Map\r\n\r\n\r\n\r\n    // custom select\r\n    class CustomSelect {\r\n        static openDropdown = null;\r\n        constructor(selectElement) {\r\n            this.$select = $(selectElement);\r\n            this.placeholder = this.$select.data('placeholder');\r\n            this.listCaption = this.$select.data('list-caption');\r\n            this.defaultText = this.getDefaultText();\r\n            this.selectName = this.$select.attr('name');\r\n            this.$options = this.$select.find('option');\r\n            this.$dropdown = null;\r\n            this.initialState = {};\r\n            this.init();\r\n        }\r\n        init() {\r\n            if (!this.$select.length) return;\r\n            this.saveInitialState();\r\n            this.$select.addClass('hidden');\r\n            this.renderDropdown();\r\n            this.setupEvents();\r\n        }\r\n        saveInitialState() {\r\n            const selectedOption = this.$select.find('option:selected');\r\n            this.initialState = {\r\n                selectedText: selectedOption.text(),\r\n                selectedValue: selectedOption.val(),\r\n            };\r\n        }\r\n        getDefaultText() {\r\n            const selectedOption = this.$select.find('option[selected]');\r\n            if (selectedOption.length) {\r\n                return selectedOption.text();\r\n            } else {\r\n                return this.placeholder || this.$select.find('option:selected').text();\r\n            }\r\n        }\r\n        renderDropdown() {\r\n            const isDisabled = this.$select.is(':disabled');\r\n            const buttonTemplate = `\r\n        <button type=\"button\" class=\"dropdown__button icon-chevron-down\" \r\n            aria-expanded=\"false\" \r\n            aria-haspopup=\"true\" \r\n            ${isDisabled ? 'disabled' : ''}>\r\n            <span class=\"dropdown__button-text\">${this.defaultText}</span>\r\n        </button>\r\n    `;\r\n            this.$dropdown = $('<div>').addClass('dropdown');\r\n            const captionTemplate = this.listCaption ? `<div class=\"dropdown__caption\">${this.listCaption}</div>` : '';\r\n            this.$dropdown.html(`\r\n        ${buttonTemplate}\r\n        <div class=\"dropdown__body\" aria-hidden=\"true\">\r\n           <div class=\"dropdown__content\">\r\n               ${captionTemplate}\r\n               <ul class=\"dropdown__list\" role=\"listbox\"></ul>\r\n           </div>\r\n        </div>\r\n    `);\r\n            const list = this.$dropdown.find('.dropdown__list');\r\n            this.$options.each((index, option) => {\r\n                const $option = $(option);\r\n                const value = $option.val();\r\n                const text = $option.text();\r\n                const isSelected = $option.is(':selected');\r\n                const isDisabled = $option.is(':disabled');\r\n                const listItem = $('<li>')\r\n                    .attr('role', 'option')\r\n                    .data('value', value)\r\n                    .attr('aria-checked', isSelected)\r\n                    .addClass('dropdown__list-item')\r\n                    .text(text);\r\n                if (isSelected) listItem.addClass('selected');\r\n                if (isDisabled) {\r\n                    listItem.addClass('disabled');\r\n                    listItem.attr('aria-disabled', 'true');\r\n                }\r\n                list.append(listItem);\r\n            });\r\n            this.$select.before(this.$dropdown);\r\n        }\r\n        setupEvents() {\r\n            const button = this.$dropdown.find('.dropdown__button');\r\n            button.on('click', (event) => {\r\n                event.stopPropagation();\r\n                const isOpen = this.$dropdown.hasClass('visible');\r\n                this.toggleDropdown(!isOpen);\r\n            });\r\n            this.$dropdown.on('click', '.dropdown__list-item', (event) => {\r\n                event.stopPropagation();\r\n                const item = $(event.currentTarget);\r\n                if (!item.hasClass('disabled')) {\r\n                    this.selectOption(item);\r\n                }\r\n            });\r\n            $(document).on('click', () => this.closeDropdown());\r\n            $(document).on('keydown', (event) => {\r\n                if (event.key === 'Escape') this.closeDropdown();\r\n            });\r\n            this.$select.closest('form').on('reset', () => this.restoreInitialState());\r\n        }\r\n        toggleDropdown(isOpen) {\r\n            if (isOpen && CustomSelect.openDropdown && CustomSelect.openDropdown !== this) {\r\n                CustomSelect.openDropdown.closeDropdown();\r\n            }\r\n            const body = this.$dropdown.find('.dropdown__body');\r\n            const list = this.$dropdown.find('.dropdown__list');\r\n            const hasScroll = list[0].scrollHeight > list[0].clientHeight;\r\n            this.$dropdown.toggleClass('visible', isOpen);\r\n            this.$dropdown.find('.dropdown__button').attr('aria-expanded', isOpen);\r\n            body.attr('aria-hidden', !isOpen);\r\n            if (isOpen) {\r\n                CustomSelect.openDropdown = this;\r\n                this.$dropdown.removeClass('dropdown-top');\r\n                const dropdownRect = body[0].getBoundingClientRect();\r\n                const viewportHeight = window.innerHeight;\r\n                if (dropdownRect.bottom > viewportHeight) {\r\n                    this.$dropdown.addClass('dropdown-top');\r\n                }\r\n                list.toggleClass('has-scroll', hasScroll);\r\n            } else {\r\n                if (CustomSelect.openDropdown === this) {\r\n                    CustomSelect.openDropdown = null;\r\n                }\r\n            }\r\n        }\r\n        closeDropdown() {\r\n            this.toggleDropdown(false);\r\n        }\r\n        selectOption(item) {\r\n            const value = item.data('value');\r\n            const text = item.text();\r\n            this.$dropdown.find('.dropdown__list-item').removeClass('selected').attr('aria-checked', 'false');\r\n            item.addClass('selected').attr('aria-checked', 'true');\r\n            this.$dropdown.find('.dropdown__button').addClass('selected');\r\n            this.$dropdown.find('.dropdown__button-text').text(text);\r\n            this.$select.val(value).trigger('change');\r\n            this.closeDropdown();\r\n        }\r\n        restoreInitialState() {\r\n            const hasPlaceholder = this.placeholder !== undefined;\r\n            if (hasPlaceholder) {\r\n                this.$select.prop('selectedIndex', -1).trigger('change');\r\n                this.$dropdown.find('.dropdown__button-text').text(this.placeholder);\r\n                this.$dropdown.find('.dropdown__button').removeClass('selected');\r\n                this.$dropdown.find('.dropdown__list-item').removeClass('selected').attr('aria-checked', 'false');\r\n            } else {\r\n                const state = this.initialState;\r\n                this.$select.val(state.selectedValue).trigger('change');\r\n                this.$dropdown.find('.dropdown__list-item').removeClass('selected').attr('aria-checked', 'false');\r\n                const selectedItem = this.$dropdown.find(`.dropdown__list-item[data-value=\"${state.selectedValue}\"]`);\r\n                if (selectedItem.length) {\r\n                    selectedItem.addClass('selected').attr('aria-checked', 'true');\r\n                }\r\n                this.$dropdown.find('.dropdown__button-text').text(state.selectedText);\r\n                this.$dropdown.find('.dropdown__button').addClass('selected');\r\n            }\r\n        }\r\n        syncSelectedOption() {\r\n            const selectedOption = this.$select.find('option:selected');\r\n            const selectedValue = selectedOption.val();\r\n            const selectedText = selectedOption.text();\r\n            this.$dropdown.find('.dropdown__list-item').removeClass('selected').attr('aria-checked', 'false');\r\n            const selectedItem = this.$dropdown.find(`.dropdown__list-item[data-value=\"${selectedValue}\"]`);\r\n            selectedItem.addClass('selected').attr('aria-checked', 'true');\r\n            this.$dropdown.find('.dropdown__button-text').text(selectedText);\r\n        }\r\n    }\r\n    $('.select').each((index, element) => {\r\n        const $element = $(element);\r\n        const $select = $element.find('select');\r\n        if ($select.length) {\r\n            new CustomSelect($select[0]);\r\n        }\r\n    });\r\n\r\n\r\n    // range slider\r\n\r\n    const rangeFilters = $('.range');\r\n\r\n    if (rangeFilters.length > 0) {\r\n        rangeFilters.each(function () {\r\n            const rangeSlider = $(this).find('.range__slider')[0];\r\n            const startInput = $(this).find('.range__control--start');\r\n            const endInput = $(this).find('.range__control--end');\r\n            const inputs = [startInput, endInput];\r\n            const form = $(this).closest('form');\r\n            const resetButton = form.find('button[type=\"reset\"]');\r\n            const externalResetButton = $(`button[type=\"reset\"][form=\"${form.attr('id')}\"]`);\r\n            const allResetButtons = $.merge(resetButton, externalResetButton);\r\n            const min = parseInt(startInput.attr('min'));\r\n            const max = parseInt(endInput.attr('max')) || 1000000;\r\n            const margin = Math.round((max - min) * 0.05);\r\n\r\n\r\n\r\n            function parseNumber(value) {\r\n                return parseInt(value.replace(/\\s/g, ''));\r\n            }\r\n\r\n            function updateMaxLength(input) {\r\n                const maxLength = parseInt(input.attr('maxlength'));\r\n                const numLength = maxLength - Math.floor((maxLength - 1) / 4);\r\n                input.attr('maxlength', numLength);\r\n            }\r\n\r\n            function getTextWidth(text, input) {\r\n                const span = document.createElement(\"span\");\r\n                const cs = window.getComputedStyle(input);\r\n                span.style.position = \"absolute\";\r\n                span.style.visibility = \"hidden\";\r\n                span.style.whiteSpace = \"nowrap\";\r\n                span.style.font = cs.font;\r\n                span.style.letterSpacing = cs.letterSpacing;\r\n                span.textContent = String(text || \"\");\r\n                document.body.appendChild(span);\r\n                const w = span.offsetWidth;\r\n                document.body.removeChild(span);\r\n                return w;\r\n            }\r\n\r\n            function updateUnitPosition(input) {\r\n                const $input = $(input);\r\n                const $units = $input.siblings(\".range__unit\");\r\n                if ($units.length === 0) return;\r\n\r\n                const cs = window.getComputedStyle(input);\r\n                const value = $input.val();\r\n                const textWidth = getTextWidth(value, input);\r\n\r\n                const paddingLeft = parseFloat(cs.paddingLeft) || 0;\r\n                const paddingRight = parseFloat(cs.paddingRight) || 0;\r\n                const clientWidth = input.clientWidth;\r\n                const gap = 4;\r\n\r\n                const textStartX = paddingLeft;\r\n\r\n                const $currency = $units.last();\r\n                const currencyWidth = $currency.outerWidth();\r\n                const desiredCurrencyLeft = textStartX + textWidth + gap;\r\n                const maxCurrencyLeft = clientWidth - paddingRight - currencyWidth;\r\n                const currencyLeft = Math.min(desiredCurrencyLeft, maxCurrencyLeft);\r\n                $currency.css(\"left\", currencyLeft + \"px\");\r\n\r\n                const $label = $units.first();\r\n                const labelWidth = $label.outerWidth();\r\n\r\n                const labelLeft = Math.max(0, paddingLeft - labelWidth - gap);\r\n                $label.css(\"left\", labelLeft + \"px\");\r\n\r\n                $units.addClass(\"ready\");\r\n            }\r\n\r\n\r\n\r\n            updateMaxLength(startInput);\r\n            updateMaxLength(endInput);\r\n\r\n            startInput.val(startInput.val());\r\n            endInput.val(endInput.val());\r\n\r\n\r\n            noUiSlider.create(rangeSlider, {\r\n                start: [parseNumber(startInput.val()), parseNumber(endInput.val())],\r\n                connect: true,\r\n                margin: margin,\r\n                range: {\r\n                    'min': [min],\r\n                    'max': [max]\r\n                }\r\n            });\r\n\r\n            rangeSlider.noUiSlider.on('update', function (values, handle) {\r\n                inputs[handle].val(Math.round(values[handle]));\r\n                updateUnitPosition(inputs[handle][0]);\r\n            });\r\n\r\n\r\n            const setRangeSlider = (i, value) => {\r\n                let arr = [null, null];\r\n                arr[i] = parseNumber(value);\r\n                rangeSlider.noUiSlider.set(arr);\r\n            };\r\n\r\n            $.each(inputs, function (index, input) {\r\n                $(input).on('change', function (e) {\r\n                    setRangeSlider(index, $(this).val());\r\n                });\r\n                $(input).on('input', function (e) {\r\n                    let value = $(this).val();\r\n                    value = value.replace(/[^\\d]/g, '');\r\n                    $(this).val(value);\r\n                    $(this).addClass('active');\r\n                });\r\n                $(input).on('input change', function () {\r\n                    updateUnitPosition(this);\r\n                });\r\n                updateUnitPosition(input[0]);\r\n            });\r\n            const ro = new ResizeObserver(() => {\r\n                updateUnitPosition(startInput[0]);\r\n                updateUnitPosition(endInput[0]);\r\n            });\r\n            ro.observe(startInput[0]);\r\n            ro.observe(endInput[0]);\r\n            if (allResetButtons.length > 0) {\r\n                allResetButtons.on('click', function () {\r\n                    setTimeout(function () {\r\n                        startInput.val(startInput[0].defaultValue);\r\n                        endInput.val(endInput[0].defaultValue);\r\n                        rangeSlider.noUiSlider.set([parseNumber(startInput[0].defaultValue), parseNumber(endInput[0].defaultValue)]);\r\n                    }, 0);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    var arrowTop = $('.arrow-top');\r\n\r\n    if (arrowTop.length) {\r\n\r\n        $(window).on('scroll', function () {\r\n            var scrollPosition = $(window).scrollTop();\r\n            var viewportHeight = $(window).height();\r\n\r\n            if (scrollPosition > viewportHeight) {\r\n                arrowTop.addClass('visible');\r\n            } else {\r\n                arrowTop.removeClass('visible');\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n});\r\n\r\n\r\n\n\n//# sourceURL=webpack://tlm-gulp/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;